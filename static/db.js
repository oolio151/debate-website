//firebase setup
/* 

THIS IS ALL THE OLD FIREBASE CODE FROM BEFORE THE MIGRATION TO PYTHON
NOT GONNA REMOVE BECAUSE :)))))))))

const firebaseConfig = {
    apiKey: "AIzaSyDFKM8lpl0EsyGsn-i_1k1K0QHOevSRbw4",
    authDomain: "debateclub2-fd753.firebaseapp.com",
    projectId: "debateclub2-fd753",
    databaseURL: "https://debateclub2-fd753-default-rtdb.firebaseio.com/",
    storageBucket: "debateclub2-fd753.appspot.com",
    messagingSenderId: "539914438651",
    appId: "1:539914438651:web:b849ce6fa6ebd348926d5e"
};

  // Initialize Firebase
const app = firebase.initializeApp(firebaseConfig);
var database = firebase.database();
var info=[];

//gets the info from the database and plasters it on the screen with bootstrap cards
function get(category){
    var userRef = database.ref(category+'/');
    
    if(category=="events"){ //FOR calendar.html
        userRef.on('value', function(snapshot){
            var data = snapshot.val();
            Object.keys(data).forEach(function(item){
                console.log(snapshot.child(item).val())
                console.log(snapshot.child(item).val().location)
                var child = snapshot.child(item).val();
                createNewCalendarCard(child.name, child.month, child.day, child.year, child.description, child.location, child.address)
            })
    
        })
    } else if(category=="leaders"){ //FOR leaders.html
        userRef.on('value', function(snapshot){
            var data = snapshot.val();
            var debateParent = document.getElementById("pfleaders");
            var speechParent = document.getElementById("speechleaders");
            var otherParent = document.getElementById("otherleaders")
            Object.keys(data).forEach(function(item){
                console.log(snapshot.child(item).val());
                var elementIdToGet = snapshot.child(item).val().position;
                var newLeaderListItem = document.createElement("li")
                newLeaderListItem.className = "list-group-item";
                newLeaderListItem.innerHTML = snapshot.child(item).val().name;
                document.getElementById(elementIdToGet).appendChild(newLeaderListItem);
            })
        })
    }
    
}


//runs get() off the page load
window.addEventListener("load", function(){


})
THE REAL CODE STARTS HERE!!!!! 
instead of pulling out of a firebase directily like before, it now pulls out of a json file, which will hopefully be generated by a python script*/
function get(category){
    const jsonDataEndpoint = '/json_data';

    var jsonData;
    fetch(jsonDataEndpoint)
    .then(response => response.json())
    .then(data => {
        jsonData = data; // Assign the JSON data to a constant
        
        if(category == "events"){
            Object.entries(jsonData.events).forEach(([key, value]) => {
                createNewCalendarCard(value.name, value.month, value.day, value.year, value.description, value.location, value.address);
            });
        } else if(category == "leaders"){
            Object.entries(jsonData.leaders).forEach(([key, value]) => {
                var elementIdToGet = value.position;
                var newLeaderListItem = document.createElement("li")
                newLeaderListItem.className = "list-group-item"
                newLeaderListItem.innerHTML = value.name;
                document.getElementById(elementIdToGet).appendChild(newLeaderListItem)
            });
        } else {
            throw { 
                name:        "Invalid Category", 
                level:       "AMONGUS level threat!!11!!1", 
                message:     "Please use a valid category, either 'events' or 'leaders", 
                htmlMessage: "there has been an error!",
                toString:    function(){return this.name + ": " + this.message;} 
              }; 
        }

        console.log(jsonData.leaders); // Do something with the JSON data
        Object.entries(jsonData.leaders).forEach(([key, value]) => {
            console.log(`${value.name}: ${value.position}`);
        });
    })
    .catch(error => {
        console.error('Error fetching JSON file:', error);
    });

}



//creates the actual html bootstrap cards and puts it in calendar.html
function createNewCalendarCard(name, month, day, year, description, location, address){
    //create the outermost div that contains the card
    var outerDiv = document.createElement("div")
    outerDiv.className = "card text-center border-light text-bg-dark mb-3";
    outerDiv.style = "max-width: 100%;"
    document.getElementById("calendarrow").appendChild(outerDiv);

    //create the card header that shows the date
    var header = document.createElement("div");
    header.className = "card-header";
    header.innerHTML = numberToMonth(month)+" "+day+", "+year;
    outerDiv.appendChild(header);

    //create the div that holds the remaining text in the card
    var textDiv = document.createElement("div");
    textDiv.className = "card-body";
    outerDiv.appendChild(textDiv);

    //create the card title that shows the event name
    var title = document.createElement("h5");
    title.innerHTML = name;
    textDiv.appendChild(title);

    //create the body text that holds the event description
    var descriptionText = document.createElement("p");
    descriptionText.innerHTML = description;
    textDiv.appendChild(descriptionText);

    //create the body text that hold the location data
    var locationData = document.createElement("p");
    locationData.innerHTML = '<b>'+location+'</b>'+": "+address;
    textDiv.appendChild(locationData);
}

//simple function to convert the numerical month in the database to a human-readable name
function numberToMonth(number){
    var returnString = ""
    switch(number){
        case 1:
            returnString = "January"; break;
        case 2:
            returnString = "February"; break;
        case 3:
            returnString = "March"; break;
        case 4:
            returnString = "April"; break;
        case 5:
            returnString = "May"; break;
        case 6:
            returnString = "June"; break;
        case 7:
            returnString = "July"; break;
        case 8:
            returnString = "August"; break;
        case 9:
            returnString = "September"; break;
        case 10:
            returnString = "October"; break;
        case 11:
            returnString = "November"; break;
        case 12: 
            returnString = "December"; break;
        default:
            returnString = "InvalidMonth"; break;
    }
    if(returnString == "InvalidMonth"){
        throw "Invalid month entered, please use an integer value between 1 and 12, inclusive"
    }
    return returnString;
}